Go - Methods, Interfaces, Embedding
23 May 2015
Tags: go golang

Doug Smith
doug.smith@fmr.com

* Method Declaration

A method is a function with a receiver. A method declaration binds an identifier, the method name, to a method, and associates the method with the receiver's base type.

The receiver is specified via an extra parameter section preceeding the method name. That parameter section must declare a single parameter, the receiver. Its type must be of the form T or *T (possibly using parentheses) where T is a type name. The type denoted by T is called the receiver base type; it must not be a pointer or interface type and it must be declared in the same package as the method. The method is said to be bound to the base type and the method name is visible only within selectors for that type.

  func (p *Point) Length() float64 {
  	return math.Sqrt(p.x * p.x + p.y * p.y)
  }

  func (p *Point) Scale(factor float64) {
  	p.x *= factor
  	p.y *= factor
  }

* Method Sets

A type may have a method set associated with it. The method set of an interface type is its interface. The method set of any other type T consists of all methods declared with receiver type T. The method set of the corresponding pointer type *T is the set of all methods declared with receiver *T or T (that is, it also contains the method set of T). Further rules apply to structs containing anonymous fields, as described in the section on struct types. Any other type has an empty method set. In a method set, each method must have a unique non-blank method name.

The method set of a type determines the interfaces that the type implements and the methods that can be called using a receiver of that type.

* Methods - Pointer vs Value

Use pointers when:
- You want to modify the receiver
- You have other pointer receivers for the type (one point receiver, all pointer receivers)
- The receiver is such that passing around copies is expensive

Think of every struct as having a nature. If the nature of the struct is something that should not be changed, like a time, a color or a coordinate, then implement the struct as a primitive data value. If the nature of the struct is something that can be changed, even if it never is in your program, it is not a primitive data value and should be implemented to be shared with a pointer. Don’t create structs that have a duality of nature.

* Code Review

.link https://play.golang.org/p/AYsB78Dlxb Method Declarations and Receivers
.link https://play.golang.org/p/zHePe-yTUw Named type methods

* Interfaces

An interface type specifies a method set called its interface. A variable of interface type can store a value of any type with a method set that is any superset of the interface. Such a type is said to implement the interface. The value of an uninitialized variable of interface type is nil.

As with all method sets, in an interface type, each method must have a unique non-blank name.

  // A simple File interface
  interface {
  	Read(b Buffer) bool
  	Write(b Buffer) bool
  	Close()
  }

* Types and Interfaces

More than one type may implement an interface. For instance, if two types S1 and S2 have the method set

  func (p T) Read(b Buffer) bool { return … }
  func (p T) Write(b Buffer) bool { return … }
  func (p T) Close() { … }

(where T stands for either S1 or S2) then the File interface is implemented by both S1 and S2, regardless of what other methods S1 and S2 may have or share.

A type implements any interface comprising any subset of its methods and may therefore implement several distinct interfaces. For instance, all types implement the empty interface:

  interface{}

* Interface Names

By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.

There are a number of such names and it's productive to honor them and the function names they capture. Read, Write, Close, Flush, String and so on have canonical signatures and meanings. To avoid confusion, don't give your method one of those names unless it has the same signature and meaning. Conversely, if your type implements a method with the same meaning as a method on a well-known type, give it the same name and signature; call your string-converter method String not ToString.

* Interface Checks

A type need not declare explicitly that it implements an interface. Instead, a type implements the interface just by implementing the interface's methods. In practice, most interface conversions are static and therefore checked at compile time.

Some interface checks do happen at run-time, though. One instance is in the encoding/json package, which defines a Marshaler interface. When the JSON encoder receives a value that implements that interface, the encoder invokes the value's marshaling method to convert it to JSON instead of doing the standard conversion. The encoder checks this property at run time with a type assertion like:

  m, ok := val.(json.Marshaler)

* Code Review

.link https://play.golang.org/p/vh0POq6FYR Type Assertion
.link https://play.golang.org/p/NMIpXSiDPk Unsafe Type Assertion
.link https://play.golang.org/p/eY2Ms-UF-t Method Receivers
.link https://play.golang.org/p/Lo1ucf1e9d Polymorphism
.link https://play.golang.org/p/yaUWLZjidB Address of Value

* Embedding

Go does not provide the typical, type-driven notion of subclassing, but it does have the ability to “borrow” pieces of an implementation by embedding types within a struct or interface.

Interface embedding is very simple. We've mentioned the io.Reader and io.Writer interfaces before; here are their definitions.

  type Reader interface {
      Read(p []byte) (n int, err error)
  }

  type Writer interface {
      Write(p []byte) (n int, err error)
  }

* Embedding - Continued

The io package also exports several other interfaces that specify objects that can implement several such methods. For instance, there is io.ReadWriter, an interface containing both Read and Write. We could specify io.ReadWriter by listing the two methods explicitly, but it's easier and more evocative to embed the two interfaces to form the new one, like this:

  // ReadWriter is the interface that combines the Reader and Writer interfaces.
  type ReadWriter interface {
      Reader
      Writer
  }

This says just what it looks like: A ReadWriter can do what a Reader does and what a Writer does; it is a union of the embedded interfaces (which must be disjoint sets of methods). Only interfaces can be embedded within interfaces.

* Embedding and Structs

A field declared with a type but no explicit field name is an anonymous field, also called an embedded field or an embedding of the type in the struct. An embedded type must be specified as a type name T or as a pointer to a non-interface type name *T, and T itself may not be a pointer type. The unqualified type name acts as the field name.

A field or method f of an anonymous field in a struct x is called promoted if x.f is a legal selector that denotes that field or method f.

Promoted fields act like ordinary fields of a struct except that they cannot be used as field names in composite literals of the struct.

* Embedding, Structs, and Promoted Methods

Given a struct type S and a type named T, promoted methods are included in the method set of the struct as follows:

- If S contains an anonymous field T, the method sets of S and *S both include promoted methods with receiver T. The method set of *S also includes promoted methods with receiver *T.
- If S contains an anonymous field *T, the method sets of S and *S both include promoted methods with receiver T or *T.

* Embedding and Composition

.link http://www.goinggo.net/2013/07/object-oriented-programming-in-go.html Object-Oriented Programming in Go

* Code Review

.link https://play.golang.org/p/e5O_Dx5VpM Declaring Fields
.link https://play.golang.org/p/UkrDXkk-Ch Embedding Types
.link https://play.golang.org/p/BgEoThS7u9 Embedding Types and Interfaces
.link https://play.golang.org/p/jfOfrRMPZR Outer and Inner Type Interface Declarations
