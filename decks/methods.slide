Go - Methods
23 May 2015
Tags: go golang

Doug Smith
doug.smith@fmr.com

* Method Declaration

A method is a function with a receiver. A method declaration binds an identifier, the method name, to a method, and associates the method with the receiver's base type.

The receiver is specified via an extra parameter section preceeding the method name. That parameter section must declare a single parameter, the receiver. Its type must be of the form T or *T (possibly using parentheses) where T is a type name. The type denoted by T is called the receiver base type; it must not be a pointer or interface type and it must be declared in the same package as the method. The method is said to be bound to the base type and the method name is visible only within selectors for that type.

  func (p *Point) Length() float64 {
  	return math.Sqrt(p.x * p.x + p.y * p.y)
  }

  func (p *Point) Scale(factor float64) {
  	p.x *= factor
  	p.y *= factor
  }

* Method Sets

A type may have a method set associated with it. The method set of an interface type is its interface. The method set of any other type T consists of all methods declared with receiver type T. The method set of the corresponding pointer type *T is the set of all methods declared with receiver *T or T (that is, it also contains the method set of T). Further rules apply to structs containing anonymous fields, as described in the section on struct types. Any other type has an empty method set. In a method set, each method must have a unique non-blank method name.

The method set of a type determines the interfaces that the type implements and the methods that can be called using a receiver of that type.

* Methods - Pointer vs Value

Use pointers when:
- You want to modify the receiver
- You have other pointer receivers for the type (one point receiver, all pointer receivers)
- The receiver is such that passing around copies is expensive

Think of every struct as having a nature. If the nature of the struct is something that should not be changed, like a time, a color or a coordinate, then implement the struct as a primitive data value. If the nature of the struct is something that can be changed, even if it never is in your program, it is not a primitive data value and should be implemented to be shared with a pointer. Donâ€™t create structs that have a duality of nature.
