Go - HTTP
23 May 2015
Tags: go golang

Doug Smith

* net/http Package


Foundational Types

- ResponseWriter
- Request
- Client
- Server
- ServeMux
- Transport
- HandlerFunc

.link https://golang.org/pkg/net/http/ net/http package

* HTTP Server - Basic

Code Samples

.link https://github.com/ardanlabs/gotraining/blob/master/topics/web/basics/example1/main.go Simple Web Server
.link https://github.com/ardanlabs/gotraining/blob/master/topics/web/basics/example2/main.go Server Mux Example
.link https://github.com/ardanlabs/gotraining/blob/master/topics/web/basics/example3/main.go User Defined Handler Example 1
.link https://github.com/ardanlabs/gotraining/blob/master/topics/web/basics/example4/main.go User Defined Handler Example 2

* HTTP Client

net/http package provides a default client implementation that is used
by some convenience methods:

resp, err := http.Get("http://example.com/")

resp, err := http.Post("http://example.com/upload", "image/jpeg", &buf)

* HTTP Client - Customization

Instantiate a client and customize its transport, use customer headers, and/or 
override other configuration based
on your needs...

.link https://github.com/d-smith/go-examples/blob/master/mtls/client/client.go Custom Client Transport

* HTTP Client - Responsibilities

When invoking a method that returns a response, the caller is responsible for
completely reading the contents of the response and closing the response body.
Failure to do so will result in a resource leak.

.link https://github.com/d-smith/go-examples/blob/master/mtls/client/client.go Client Clean Up

* HTTP Test Support

The standard library provides support for testing HTTP handlers and 
spinning up http listeners on demand

.link https://golang.org/pkg/net/http/httptest/ net/http/httptest package

Examples

.link https://github.com/xtracdev/es-atom-pub/blob/master/atompub_test.go Test Recorder
.link https://github.com/xtracdev/es-atom-pub/blob/master/internal/features/atom/recent_steps.go Test Server

* Serving Static Content

net/http FileServer type can be used to serve static content from the
file system

.link https://github.com/d-smith/go-examples/blob/master/swagger-endpoint/app.go FileServer Example

* HTTP Context

Golang has a context type which provides the ability to pass context
along with HTTP calls. This is useful for attaching context to requests
as they flow through an HTTP middleware chain, as well as for 
attaching deadlines and timeouts, and providing the ability to cancel
http requests.

.link https://godoc.org/golang.org/x/net/context Context Package
.link https://github.com/d-smith/go-examples/blob/master/httpctx17/main.go HTTP Context Example

* TLS

Golang supports TLS, including MTLS.

In general golang has rich cryptography support, but be aware many algorithms are
supported for backwards compatibility and legacy support reasons, and careful
consideration is needed for newer apps seeking to maximize security.

.link https://github.com/d-smith/go-examples/tree/master/mtls MTLS Example
.link https://github.com/gtank/cryptopasta Good Crypto Advice for Golang Programming

* Coding Exercise

.link https://golang.org/doc/articles/wiki/ Writing Web Applications Tutorial