Go - Variables
23 May 2015
Tags: go golang

Doug Smith
doug.smith@fmr.com

* Basic Types - Boolean

- Go lang type: `bool`
- Represents Boolean values using predeclared constants true and false

* Numeric Types - Architecture independent

- Unsigned integers (`uint8`, `uint16` , `uint32`, `uint64`)
- Signed integers (`int8`, `int16`, `int32`, `int64`)
- Floating point numbers (`float32`, `float64`)
- Complex numbers (`complex64`, `complex128`)
- byte (alias for `uint8`)
- rune (alias for `int32`)

* Numeric Types - Architecture dependent

- `uint` - Either 32 or 64 bits
- `int` - Same size as uint
- `uintptr` - Unsigned integer large enough to hold a pointer

* Strings

A _string_type_ represents the set of string values. A string value is a (possibly empty)
sequence of bytes. Strings are immutable: once created, it is impossible to change
the contents of a string. The predeclared string type is `string`.

The length of a string s (its size in bytes) can be discovered using the built-in
function `len`. The length is a compile-time constant if the string is a constant.
A string's bytes can be accessed by integer indices 0 through len(s)-1. It is illegal
to take the address of such an element; if s[i] is the i'th byte of a string, &s[i]
is invalid.

* Variable Declarations

A variable declaration creates one or more variables, binds corresponding identifiers
to them, and gives each a type an initial value.

If a list of expressions is given, the variables are initialized with the expressions
following the rules for assignments. Otherwise, each variable is initialized to its
zero value.

If a type is present, each variable is given that type. Otherwise, each variable
is given the type of the corresponding initialization value in the assignment. If
that value is an untyped constant, it is first converted to its default type; if it
is an untyped boolean value, it is first converted to type bool. The predeclared
value nil cannot be used to initialize a variable with no explicit type.

* Example - Variable Declarations

  var i int
  var U, V, W float64
  var k = 0
  var x, y float32 = -1, -2
  var (
  	i       int
  	u, v, s = 2.0, 3.0, "bar"
  )
  var re, im = complexSqrt(-1)
  var _, found = entries[name]  // map lookup; only interested in "found"

* Short Variable Declarations

A _short_variable_declaration_ is short hand for a regular variable declaration
with initializer expressions but no types.

  i, j := 0, 10
  f := func() int { return 7 }
  ch := make(chan int)
  r, w := os.Pipe(fd)  // os.Pipe() returns two values
  _, y, _ := coord(p)  // coord() returns three values; only interested in y coordinate

Unlike regular variable declarations, a short variable declaration may redeclare
variables provided they were originally declared earlier in the same block with
the same type, and at least one of the non-blank variables is new. As a consequence,
redeclaration can only appear in a multi-variable short declaration. Redeclaration
does not introduce a new variable; it just assigns a new value to the original.

Short variable declarations may appear only inside functions. In some contexts such
as the initializers for "if", "for", or "switch" statements, they can be used to
declare local temporary variables.

* The Zero Value

When storage is allocated for a variable, either through a declaration or a call of
new, or when a new value is created, either through a composite literal or a call
of make, and no explicit initialization is provided, the variable or value is given
a default value. Each element of such a variable or value is set to the zero value
for its type: false for booleans, 0 for integers, 0.0 for floats, "" for strings,
and nil for pointers, functions, interfaces, slices, channels, and maps. This
initialization is done recursively, so for instance each element of an array of
structs will have its fields zeroed if no value is specified.

* Code Review

.link http://play.golang.org/p/6w6hBNE75a
